/*
 * Copyright 2017 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * This file incorporates changes by @continuumsecurity
 */

plugins {
    id 'java'
    id "io.spring.dependency-management" version "1.0.6.RELEASE"
}

group 'com.continuumsecurity.elasticagent'
version '2.2.2'

// these values that go into plugin.xml
project.ext.pluginDesc = [
        id         : 'com.continuumsecurity.elasticagent.ec2',
        version    : project.version,
        goCdVersion: '19.8.0',
        name       : 'EC2 Elastic Agent Plugin',
        description: 'AWS EC2 Elastic Agent Plugin for GoCD',
        vendorName : 'Continuum Security',
        vendorUrl  : 'https://github.com/continuumsecurity/GoCD-EC2-Elastic-Agent-Plugin'
]

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    jcenter()
    mavenCentral()
}

sourceSets {
    test {
        java {
            compileClasspath += configurations.compileOnly
            runtimeClasspath += configurations.compileOnly
            resources.srcDirs += ['src/main/resource-templates']
        }
    }
}

dependencies {
    compileOnly 'cd.go.plugin:go-plugin-api:19.8.0'

    implementation 'org.apache.commons:commons-lang3:3.8.1'
    implementation 'com.google.code.gson:gson:2.8.5'
    implementation 'com.google.guava:guava:23.0'
    implementation 'joda-time:joda-time:2.10.3'
    implementation 'commons-io:commons-io:2.6'
    implementation 'org.freemarker:freemarker:2.3.29'
    implementation 'software.amazon.awssdk:ec2:2.10.30'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.3.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.3.2'
    testImplementation 'org.hamcrest:hamcrest-library:2.1'
    testImplementation 'org.mockito:mockito-core:3.0.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:3.0.0'
    testImplementation 'org.skyscreamer:jsonassert:1.5.0'
}

processResources {
    from("src/main/resource-templates") {
        filesMatching('plugin.xml') {
            expand project.pluginDesc
        }

        filesMatching('plugin.properties') {
            expand project.pluginDesc
        }
    }
}

test {
    useJUnitPlatform()
    testLogging {
        showStandardStreams = true

        exceptionFormat 'full'

        beforeSuite { suite ->
            if (suite.parent) {
                logger.quiet("Running ${suite.name}")
            }
        }

        afterSuite { suite, result ->
            if (suite.parent) {
                logger.quiet("Tests run: ${result.testCount}, Failures: ${result.failedTestCount}, Skipped: ${result.skippedTestCount}, Time elapsed: ${(result.endTime - result.startTime) / 1000.00} sec")
                if (result.resultType == TestResult.ResultType.FAILURE) {
                    logger.quiet("Test ${suite.name} FAILED")
                }
            } else {
                logger.quiet("Total tests run: ${result.testCount}, Failures: ${result.failedTestCount}, Skipped: ${result.skippedTestCount}, Time elapsed: ${(result.endTime - result.startTime) / 1000.00} sec")
            }
        }
    }
}

jar {
    from(configurations.runtimeClasspath) {
        into "lib/"
    }

    from(sourceSets.main.java) {
        into "/"
    }
}